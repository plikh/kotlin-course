package com.pavel.likholap.lesson13

import kotlin.math.roundToInt

fun main(){

//Задание 1. Предварительные задачи на использование методов.
//Проверить, что размер коллекции больше 5 элементов.
    println(listOf(1, 2, 4, 5, 7, 9).size > 5)

//Проверить, что коллекция пустая
    println(listOf(null).isEmpty())

//Проверить, что коллекция не пустая
    println(listOf(1).isNotEmpty())

//Взять элемент по индексу или создать значение если индекса не существует
    println(listOf<Int?>(1, 2, 4).getOrElse(5) { -1 })

//Собрать коллекцию в строку
    println(listOf("1", "2", "4").joinToString("*&_+"))

//Посчитать сумму всех значений
    println(listOf(7, 7, 7).sum())

//Посчитать среднее
    println(listOf(1, 2, 3, 4, 5).average())

//Взять максимальное число
    println(listOf(1, 2, 3, 4, 5).max())

//Взять минимальное число
    println(listOf(1, 2, 3, 4, 5).min())

//Взять первое число или null
    println(listOf<Int?>(1).firstOrNull())

//Проверить что коллекция содержит элемент
    println(listOf(1, 2, 23).contains(23))

//Отфильтровать коллекцию по диапазону 18-30
    println(listOf(12, 19, 1, 23, 30).filter { it in 18..30 })

//Выбрать числа, которые не делятся на 2 и 3 одновременно
    println(listOf(3, 2, 6, 23, 30).filterNot { it % 6 == 0 })

//Очистить текстовую коллекцию от null элементов
    println(listOf(1, 2, 3, null).filterNotNull())

//Преобразовать текстовую коллекцию в коллекцию длин слов
    println(listOf("hi", "hello", "what's up").map {it.length})

//Преобразовать текстовую коллекцию в мапу, где ключи - слова, а значения - перевёрнутые слова
    println(listOf("hi", "hello", "what's up").associate { it to  it.reversed()})

//Отсортировать список в алфавитном порядке
    println(listOf("c", "b", "d", "a").sorted())

//Отсортировать список по убыванию
    println(listOf("c", "b", "d", "a").sortedDescending())

//Распечатать квадраты элементов списка
    listOf(3, 4, 5).forEach { print("${it * it} " ) }

//Группировать список по первой букве слов
    println(listOf("apple", "airport", "banana", "bread").groupBy { it[0] })

//Очистить список от дублей
    println(listOf("apple", "apple", "apple", "apple").distinct())

//Взять первые 3 элемента списка
    println(listOf("c", "b", "d", "a").take(3))

//Взять последние 3 элемента списка
    println(listOf("c", "b", "d", "a").takeLast(3))

//Задание 2: Характеристика числовой коллекции
//Написать метод, который принимает коллекцию чисел и возвращает строку с текущим
//состоянием коллекции используя конструкцию when
    fun getCharacteristicCollection(collection: List<Int>): String{
        return when {
            collection.isEmpty() -> "Пусто"
            collection.size < 5 -> "Короткая"
            collection.first() == 0 -> "Стартовая"
            collection.sum() > 10000 -> "Массивная"
            collection.average() == 10.0 -> "Сбалансированная"
            collection.joinToString("").length == 20 -> "Клейкая"
            collection.max() < 10 -> "Отрицательная"
            collection.min() > 1000 -> "Положительная"
            collection.containsAll(listOf(3, 14)) -> "Пи***тая"
            else -> "Уникальная"
        }
    }
    println(getCharacteristicCollection(listOf()))
    println(getCharacteristicCollection(listOf(1, 2, 3, 4)))
    println(getCharacteristicCollection(listOf(0, 1, 2, 3, 4, 5)))
    println(getCharacteristicCollection(listOf(5000, 4000, 2000, 1, 1)))
    println(getCharacteristicCollection(listOf(10, 10, 10, 10, 10)))
    println(getCharacteristicCollection(listOf(10, 10, 10, 10, 10, 20, 20, 20, 20, 20)))
    println(getCharacteristicCollection(listOf(7, 1, 2, 3, 4, 5, 8)))
    println(getCharacteristicCollection(listOf(1001, 2000, 3000, 1001, 1001, 1001) ))
    println(getCharacteristicCollection(listOf(3, 14, 20, 30, 40)))
    println(getCharacteristicCollection(listOf(5, 6, 7, 8, 9, 10)))

//Задание 3: Анализ Учебных Оценок
//Начальные значения: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    println(grades.filter { it >= 60 }.sorted().take(3))

/*Задание 4: Создание каталога по первой букве.
Начальные значения: val list = listOf(
"Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка",
 "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка",
 "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница",
 "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник",
 "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")
Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве.*/
    val list = listOf(
        "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка",
        "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка",
        "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница",
        "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник",
        "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")
    println(list.map { it.lowercase() }.groupBy { it[0] })


//Задание 5: Подсчёт средней длины слов в списке.
//Начальные значения из задачи 3.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение.
// Вывести форматированный текст с двумя знаками после запятой.
    val formatted = list.map { it.length }.average()
    println(String.format("%.2f", formatted))

//Задание 6: Категоризация чисел.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
    val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    println(numbers.distinct().sortedDescending().groupBy { if (it % 2 == 0) "четные" else "нечетные"})

//Задание 7: Поиск первого подходящего элемента
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60)
//Цель: Найти первый возраст в списке, который соответствует условию (больше 18),
//преобразовать его к строке, или вернуть сообщение "Подходящий возраст не найден".

    val ages = listOf(22, 18, 30, 45, 17, null, 60)
    println(ages.firstOrNull{it !=null && it > 18}?.toString() ?: "Подходящий возраст не найден")

}